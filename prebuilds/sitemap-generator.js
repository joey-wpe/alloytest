const fetch = require('node-fetch');
const fs = require('fs').promises;
const xml2js = require('xml2js');
const path = require('path');
const xmlBuilder = new xml2js.Builder();

const { loadEnvConfig } = require('@next/env');

loadEnvConfig(process.cwd());

console.log('Running script: sitemap-generator.js');

const frontendUrl = process.env.NEXT_PUBLIC_FRONTEND_URL;

// Get date in format used by lastmod field in XML
// ref: https://stackoverflow.com/a/17415677/18005
const toIsoString = (date) => {
	const tzo = -date.getTimezoneOffset();
	const dif = tzo >= 0 ? '+' : '-';
	const pad = (num) => (num < 10 ? '0' : '') + num;

	return (
		date.getFullYear() +
		'-' +
		pad(date.getMonth() + 1) +
		'-' +
		pad(date.getDate()) +
		'T' +
		pad(date.getHours()) +
		':' +
		pad(date.getMinutes()) +
		':' +
		pad(date.getSeconds()) +
		dif +
		pad(Math.floor(Math.abs(tzo) / 60)) +
		':' +
		pad(Math.abs(tzo) % 60)
	);
};

const convertUrls = (xmlString) => {
	const backendUrlWithoutHttps = process.env.BACKEND_SERVER.replace('http://', '//').replace('https://', '//');
	return xmlString
		.replace(
			`<?xml-stylesheet type="text/xsl" href="${backendUrlWithoutHttps}/wp-content/plugins/wordpress-seo/css/main-sitemap.xsl"?>`,
			''
		)
		.replace(new RegExp(process.env.BACKEND_SERVER, 'g'), frontendUrl)
		.replace(new RegExp('<!-- XML Sitemap generated by Yoast SEO -->', 'g'), '');
};

const generateSitemaps = async () => {
	if (process.env.STORYBOOK_ENV === 'true') {
		console.log('Skipping Generate sitemaps on Storybook environment.');
		return;
	}

	try {
		console.log(`Generating sitemaps using frontendUrl '${frontendUrl}'`);
		console.log('Reading sitemap_index_template.xml');
		const xmlFileTemplate = await fs.readFile(path.resolve(__dirname, 'sitemap_index_template.xml'), 'utf8');

		const dt = new Date();
		const formattedTimestamp = toIsoString(dt);

		// NOTE:: not using .replaceAll() as it is not supported by the node version
		let xmlFile = xmlFileTemplate.split('[placeholderUrl]').join(frontendUrl);
		xmlFile = xmlFile.split('[placeholderTimestamp]').join(formattedTimestamp);

		console.log('Generating sitemap_index.xml');
		await fs.writeFile('public/sitemap_index.xml', xmlFile);

		const parseXmlString = xml2js.parseStringPromise;
		const sitemapIndexObject = await parseXmlString(xmlFileTemplate);

		console.log('Requesting XML files listed in index');

		const sitemapPromises = sitemapIndexObject.sitemapindex.sitemap.map(async (item) => {
			const templatePath = item.loc[0];
			const sitemapPath = templatePath.replace('[placeholderUrl]', process.env.BACKEND_SERVER);

			console.log(`Requesting ${sitemapPath}`);
			const sitemapResponse = await fetch(sitemapPath);
			const sitemapData = await sitemapResponse.text();

			return {
				name: templatePath.replace('[placeholderUrl]/', ''),
				dataString: convertUrls(sitemapData),
			};
		});

		console.log('Generating auxiliary sitemap files');
		const sitemapFiles = await Promise.all(sitemapPromises);

		for (const item of sitemapFiles) {
			const filenameOnly = item.name;

			const sitemapXmlObj = await parseXmlString(item.dataString);

			// Remove trailing slashes from URLs in <loc> tags and remove <image:image> tags
			sitemapXmlObj.urlset.url = sitemapXmlObj.urlset.url.map((url) => {
				const loc = url.loc[0];
				url.loc[0] = loc.endsWith('/') ? loc.slice(0, -1) : loc;
				delete url['image:image'];
				return url;
			});

			console.log(`Generating ${filenameOnly}`);
			await fs.writeFile(`public/${filenameOnly}`, xmlBuilder.buildObject(sitemapXmlObj));
		}

		console.log('Sitemap generation completed');
	} catch (error) {
		console.error('Sitemap generation failed:', error.message);
		process.exit(1); // Exit with non-zero status code to indicate failure
	}
};

// Run the script
generateSitemaps();
