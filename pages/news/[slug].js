import { serverSideTranslations } from 'next-i18next/serverSideTranslations';
import { getGlobalSettings } from '../../wplib/globalSettings';
import { getRevalidateOptions, handleInvalidDataResponse } from '../../wplib/util';
import GlobalConstants from '../../GlobalConstants';
import { convertWPLocaleToNextJSLocale, popUrlSegmentsForPathAndLanguages } from '../../wplib/util';
import { getAllNews, getPreviewNewsDataByDatabaseID, getPublishedNewsDataBySlug } from '../../wplib/news';
import BasePageWrapper from '../../components/page-templates/BasePageWrapper/BasePageWrapper';
import NewsDetailTemplate from '../../components/page-templates/NewsDetailTemplate/NewsDetailTemplate';
import { transformToFooterStructure } from '../../components/template-parts/Footer/Footer.datamediator';
import { pageHeaderToGlobalAlert } from '../../data-mediators/PageHeaderToGlobalAlertMediator';
import { mainMenuToMenu } from '../../components/template-parts/Header/Header.datamediator';

// NOTE:: this method is called with data from getStaticProps for a specific route (as generated by getStaticPaths())
export default function Page({ slug, news, globalAlertData, footerMenu, menu }) {
	const { uri, title, seo, content } = news;

	console.log(`news/[slug].Page() - rendering news: ${GlobalConstants.FrontendRoutes.News}/${slug}`);

	return (
		<BasePageWrapper title={title ?? ''} seoData={seo} translatedPages={menu?.translatedPages}>
			<NewsDetailTemplate
				pageData={news}
				globalAlertData={globalAlertData}
				headerMenuData={menu}
				footerMenu={footerMenu}
			/>
		</BasePageWrapper>
	);
}

export async function getStaticProps(context = {}) {
	// console.log('news/[slug].getStaticProps() - context', context);
	const slug = [context?.params.slug];
	const isPreview = Boolean(context?.preview); // force to boolean
	var databaseID = isPreview ? context?.previewData?.id : null;
	var token = isPreview ? context?.previewData?.token : null;

	// get global data (ex: menus, etc.) that doesn't change per page
	const { globalSettings, menus } = await getGlobalSettings(isPreview, context.locale);
	const mediatedFooterMenu = transformToFooterStructure(menus, globalSettings, context.locale);

	// get details from WP
	let news,
		translated = null;

	try {
		if (isPreview) {
			({ news, translated } = await getPreviewNewsDataByDatabaseID(databaseID, token, context.locale));
		} else {
			({ news, translated } = await getPublishedNewsDataBySlug(slug, context.locale));
		}
	} catch (error) {
		console.log(`news/[slug].getStaticProps() - error while fetching news`, error);
		return handleInvalidDataResponse(error);
	}
	const menu = mainMenuToMenu(menus, globalSettings, translated, context.locale);

	// determine our global alert settings based off global settings and page settings
	const globalAlertData = pageHeaderToGlobalAlert(globalSettings);

	// When having an external resource return throw 404.
	if (news.templateNews.externalResource) {
		return {
			notFound: true,
		};
	}

	const revalidateOptions = getRevalidateOptions();
	return {
		props: {
			slug,
			news,
			globalAlertData,
			footerMenu: mediatedFooterMenu,
			menu,
			...(await serverSideTranslations(context.locale, ['common'])),
		},
		...revalidateOptions,
	};
}

// NOTE:: getStaticPaths always runs server side (ref: https://nextjs.org/docs/basic-features/data-fetching/get-static-paths)
export async function getStaticPaths() {
	// if the flag is set, do a build only - no building of actual pages
	if (process.env.NO_PRERENDERED_PATHS_FALLBACK_ONLY === 'on') {
		return {
			paths: [],
			fallback: 'blocking',
		};
	}

	const { news } = await getAllNews();

	const paths = news
		.filter((newsItem) => !newsItem.templateNews.externalResource)
		.map((newsItem) => {
			var segments = newsItem.uri.split('/').filter((seg) => seg !== '');
			segments = popUrlSegmentsForPathAndLanguages(segments, GlobalConstants.FrontendRoutes.News);

			let pageLocale = convertWPLocaleToNextJSLocale(newsItem.locale.locale);

			return {
				params: {
					slug: segments[0],
				},
				locale: pageLocale,
			};
		});

	// console.log('news paths', JSON.stringify(paths));
	return {
		paths,
		fallback: false,
	};
}
