import { useRouter } from 'next/router';
import { useTranslation } from 'next-i18next';

import { getGlobalSettings } from '../../wplib/globalSettings';
import { getRevalidateOptions } from '../../wplib/util';
import GlobalConstants from '../../GlobalConstants';
import {
	convertWPLocaleToNextJSLocale,
	popUrlSegmentsForPathAndLanguages,
	handleInvalidDataResponse,
} from '../../wplib/util';
import BasePageWrapper from '../../components/page-templates/BasePageWrapper/BasePageWrapper';
import LearnTemplate from '../../components/page-templates/LearnTemplate/LearnTemplate';
import { transformToFooterStructure } from '../../components/template-parts/Footer/Footer.datamediator';
import { mainMenuToMenu } from '../../components/template-parts/Header/Header.datamediator';
import { serverSideTranslations } from 'next-i18next/serverSideTranslations';

import {
	getAllLearnPagesRest,
	getRecentLearnPages,
	getPreviewLearnDataByDatabaseID,
	getPublishedLearnDataBySlug,
} from '../../wplib/learn';

// NOTE:: this method is called with data from getStaticProps for a specific route (as generated by getStaticPaths())
export default function Page({ slug, postTypeData, post, globalAlertData, footerMenu, menu, categories }) {
	const router = useRouter();
	const { t } = useTranslation('common');

	const {
		title,
		seo,
		// templateBlog: { stickyDisruptor },
	} = post;
	// const displayDisruptor = stickyDisruptor.stickyDisruptorDisplay === 'yes';

	const locale = router.locale === 'en-US' ? '' : `/${router.locale}`;

	let breadcrumb = {
		breadcrumbsLinks: [
			{ label: t('breadcrumb.home'), url: `${locale}` },
			{ label: 'Learn', url: `${locale}/learn` },
		],
	};

	// Check if topics exist before adding them to the breadcrumb
	if (post?.categories?.nodes.length > 0) {
		breadcrumb.breadcrumbsLinks.push({
			label: post.categories.nodes[0].name,
			url: `${locale}/learn/topic/${post.categories.nodes[0].slug}`,
		});
	}

	breadcrumb.breadcrumbsLinks.push({ label: post.title, url: `${locale}/learn/${post.slug}` });

	console.log(`learn/[slug].Page() - rendering learn page: ${GlobalConstants.FrontendRoutes.Learn}/${slug}`);
	return (
		<BasePageWrapper
			title={title ?? ''}
			seoData={seo}
			translatedPages={menu?.translatedPages}
			breadcrumbSchemaList={breadcrumb}
		>
			<>
				{/* {displayDisruptor ? <StickyDisruptor {...stickyDisruptorData(stickyDisruptor)} /> : null} */}
				<LearnTemplate
					pageData={post}
					globalAlertData={globalAlertData}
					headerMenuData={menu}
					footerMenu={footerMenu}
					postTypeData={postTypeData}
					breadcrumb={breadcrumb}
				/>
			</>
		</BasePageWrapper>
	);
}

export async function getStaticProps(context = {}) {
	// console.log('learn/[slug].getStaticProps() - context', context);

	const slug = [context?.params.slug];
	const isPreview = Boolean(context?.preview); // force to boolean
	var databaseID = isPreview ? context?.previewData?.id : null;
	var token = isPreview ? context?.previewData?.token : null;

	// get global data (ex: menus, etc.) that doesn't change per page
	const { globalSettings, menus } = await getGlobalSettings(isPreview, context.locale);
	const mediatedFooterMenu = transformToFooterStructure(menus, globalSettings, context.locale);

	// get details from WP
	let post,
		postTypeData,
		translated = null;

	try {
		if (isPreview) {
			({ post, postTypeData, translated } = await getPreviewLearnDataByDatabaseID(databaseID, token, context.locale));
		} else {
			({ post, postTypeData, translated } = await getPublishedLearnDataBySlug(slug, context.locale));
		}
	} catch (error) {
		console.log(`learn/[slug].getStaticProps() - error while fetching post`, error);
		return handleInvalidDataResponse(error);
	}

	const menu = mainMenuToMenu(menus, globalSettings, translated, context.locale);

	// determine our global alert settings based off global settings and page settings
	const globalAlertData = null; //pageHeaderToGlobalAlert(globalSettings, post.pageHeader);

	const revalidateOptions = getRevalidateOptions();
	let categories = null; //await getAllBlogCategories();

	return {
		props: {
			slug,
			post,
			postTypeData,
			globalAlertData,
			footerMenu: mediatedFooterMenu,
			menu,
			categories,
			...(await serverSideTranslations(context.locale, ['common'])),
		},
		...revalidateOptions,
	};
}

// NOTE:: getStaticPaths always runs server side (ref: https://nextjs.org/docs/basic-features/data-fetching/get-static-paths)
export async function getStaticPaths() {
	// if the flag is set, do a build only - no building of actual pages
	if (process.env.NO_PRERENDERED_PATHS_FALLBACK_ONLY === 'on') {
		console.info(
			`learn/[slug].getStaticPaths() - NO_PRERENDERED_PATHS_FALLBACK_ONLY is on, not pre-generating any paths`
		);
		return {
			paths: [],
			fallback: 'blocking',
		};
	}

	var posts;
	if (process.env.SELECTIVE_PRERENDER === 'on') {
		console.info(
			`learn/[slug].getStaticPaths() - limited build - only getting latest ${GlobalConstants.Options.BlogPartialLimit} learn pages`
		);
		posts = await getRecentLearnPages();
	} else {
		posts = await getAllLearnPagesRest();
	}

	const paths = posts
		.filter((posts) => typeof posts.uri === 'string')
		.map((post) => {
			const uri = post.uri.replace(process.env.BACKEND_SERVER, '');
			var segments = uri.split('/').filter((seg) => seg !== '');
			segments = popUrlSegmentsForPathAndLanguages(segments, GlobalConstants.FrontendRoutes.Learn);

			let pageLocale = convertWPLocaleToNextJSLocale(post.locale.locale);

			return {
				params: {
					slug: segments[0],
				},
				locale: pageLocale,
			};
		});

	return {
		paths,
		fallback: false,
	};
}
