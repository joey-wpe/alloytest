import { useRouter } from 'next/router';
import { useTranslation } from 'next-i18next';

import { getGlobalSettings } from '../../../wplib/globalSettings';
import { getRevalidateOptions, handleInvalidDataResponse } from '../../../wplib/util';
import GlobalConstants from '../../../GlobalConstants';
import BaseTemplateWrapper from '../../../components/page-templates/BaseTemplateWrapper/BaseTemplateWrapper';
import BasePageWrapper from '../../../components/page-templates/BasePageWrapper/BasePageWrapper';
import { transformToFooterStructure } from '../../../components/template-parts/Footer/Footer.datamediator';
import { mainMenuToMenu } from '../../../components/template-parts/Header/Header.datamediator';
import { serverSideTranslations } from 'next-i18next/serverSideTranslations';
import { pageHeaderToGlobalAlert } from '../../../data-mediators/PageHeaderToGlobalAlertMediator';
import MastheadMinimal from '../../../components/template-parts/MastheadMinimal/MastheadMinimal';
import styles from '../../../styles/pages/BlogCategory.module.scss';
import CardSelector from '../../../components/molecules/CardSelector/CardSelector';
import { convertWPLocaleToNextJSLocale, popUrlSegmentsForPathAndLanguages } from '../../../wplib/util';

import { getLearnTopicBySlug, getPostsForTopic, getAllLearnTopics } from '../../../wplib/learn';

// NOTE:: this method is called with data from getStaticProps for a specific route (as generated by getStaticPaths())
export default function Page({ posts, slug, globalAlertData, topic, menu, footerMenu }) {
	const router = useRouter();
	const { t } = useTranslation('common');

	const { title, seo } = topic;

	const locale = router.locale === 'en-US' ? '' : `/${router.locale}`;

	let breadcrumb = {
		breadcrumbsLinks: [
			{ label: t('breadcrumb.home'), url: `${locale}` },
			{ label: 'Learn', url: `${locale}/learn` },
		],
	};

	// Check if topics exist before adding them to the breadcrumb
	if (topic?.categories?.nodes.length > 0) {
		breadcrumb.breadcrumbsLinks.push({
			label: topic.categories.nodes[0].name,
			url: `${locale}/learn/topic/${topic.categories.nodes[0].slug}`,
		});
	}

	breadcrumb.breadcrumbsLinks.push({ label: topic.title, url: `${locale}/learn/${topic.slug}` });

	// define masthead settings
	const mastheadSettings = {
		prehead: 'Topic',
		preheadType: 'default',
		title: title,
		titleType: 'h1',
		description: topic?.description || null,
		background: {
			type: 'pattern',
			color: 'blue',
		},
		breadcrumb,
	};

	console.log(
		`learn/topic/[...slug].Page() - rendering learn post: ${GlobalConstants.FrontendRoutes.LearnTopic}/${slug}`
	);
	return (
		<BasePageWrapper title={title ?? ''} seoData={seo} breadcrumbSchemaList={breadcrumb}>
			<BaseTemplateWrapper
				globalAlertData={globalAlertData}
				headerMenuData={menu}
				pageCTAData={null}
				footerMenu={footerMenu}
			>
				<MastheadMinimal {...mastheadSettings} />
				<div className={`${styles.container}`}>
					<CardSelector postType={'post'} cardData={posts} />
				</div>
			</BaseTemplateWrapper>
		</BasePageWrapper>
	);
}

export async function getStaticProps(context = {}) {
	const slug = context?.params.slug[0];
	let topicData = null;
	let databaseID = -1;

	// NOTE:: this route doesn't support previewing as it can't be edited in the CMS
	try {
		topicData = await getLearnTopicBySlug(slug);
		if (!topicData) {
			console.error(
				`/learn/topic/[slug].getStaticProps() - error getting databaseID - slug doesn't exist: ${slug}, returning notFound`
			);
			return {
				notFound: true,
			};
		}
	} catch (err) {
		console.error(`/learn/topic/[slug].getStaticProps() - exception getting databaseID: ${slug}, failing build`, err);
		return handleInvalidDataResponse(err);
	}

	databaseID = topicData?.databaseId;
	if (!databaseID) {
		return {
			notFound: true,
		};
	}

	// get the post data for the topic
	let postsData = null;
	try {
		postsData = await getPostsForTopic(databaseID, context?.locale);
		if (!postsData) {
			console.error(
				`/learn/topic/[slug].getStaticProps() - error getting post data from databaseID - databaseID doesn't exist: ${databaseID}, returning notFound`
			);
			return {
				notFound: true,
			};
		}
	} catch (err) {
		console.error(
			`/learn/topic/[slug].getStaticProps() - exception getting post data from databaseID: ${databaseID}, failing build`,
			err
		);
		throw err;
	}

	// get global data (ex: menus, etc.) that doesn't change per page
	const isPreview = false;
	const { globalSettings, menus } = await getGlobalSettings(isPreview, context.locale);
	const mediatedFooterMenu = transformToFooterStructure(menus, globalSettings, context.locale);

	const menu = mainMenuToMenu(menus, globalSettings, null, context.locale);
	// determine our global alert settings based off global settings and page settings
	const globalAlertData = pageHeaderToGlobalAlert(globalSettings);

	const revalidateOptions = getRevalidateOptions();

	const posts = postsData
		.filter((post) => convertWPLocaleToNextJSLocale(post?.locale?.locale) === context.locale)
		.map((post) => {
			return {
				post_type: 'post',
				core: {
					title: post.title,
					excerpt: post.excerpt ?? null,
					permalink: post.uri ?? null,
					post_thumbnail_url: post.featuredImagel ?? null,
					id: post.id,
				},
				acf: {
					exclude_from_archive_page: null,
					events_details: null,
					when: null,
				},
			};
		});

	return {
		props: {
			slug,
			posts,
			globalAlertData,
			footerMenu: mediatedFooterMenu,
			menu,
			topic: topicData,
			...(await serverSideTranslations(context.locale, ['common'])),
		},
		...revalidateOptions,
	};
}

// NOTE:: getStaticPaths always runs server side (ref: https://nextjs.org/docs/basic-features/data-fetching/get-static-paths)
export async function getStaticPaths() {
	// if the flag is set, do a build only - no building of actual pages
	if (process.env.NO_PRERENDERED_PATHS_FALLBACK_ONLY === 'on') {
		console.info(
			`/learn/topic/[...slug].getStaticPaths() - NO_PRERENDERED_PATHS_FALLBACK_ONLY is on, not pre-generating any paths`
		);
		return {
			paths: [],
			fallback: 'blocking',
		};
	}

	const posts = await getAllLearnTopics();

	const paths = posts?.data
		.filter((posts) => typeof posts.slug === 'string')
		.map((post) => {
			const pageLocale = convertWPLocaleToNextJSLocale(post?.locale?.locale || 'en-US');
			let segments = post?.slug?.split('/').filter((seg) => seg !== '');
			segments = popUrlSegmentsForPathAndLanguages(segments, GlobalConstants.FrontendRoutes.Learn.LearnTopic);
			return {
				params: {
					slug: segments,
				},
				locale: pageLocale,
			};
		});

	return {
		paths,
		fallback: false,
	};
}
