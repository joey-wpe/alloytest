import { serverSideTranslations } from 'next-i18next/serverSideTranslations';
import { getGlobalSettings } from '../../wplib/globalSettings';
import { getRevalidateOptions, handleInvalidDataResponse } from '../../wplib/util';
import GlobalConstants from '../../GlobalConstants';
import { convertWPLocaleToNextJSLocale } from '../../wplib/util';
import {
	getAllTeamMembers,
	getPreviewTeamMemberDataByDatabaseID,
	getPublishedTeamMemberDataBySlug,
} from '../../wplib/teamMembers';
import BasePageWrapper from '../../components/page-templates/BasePageWrapper/BasePageWrapper';
import TeamMemberTemplate from '../../components/page-templates/TeamMemberTemplate/TeamMemberTemplate';
import { transformToFooterStructure } from '../../components/template-parts/Footer/Footer.datamediator';
import { pageHeaderToGlobalAlert } from '../../data-mediators/PageHeaderToGlobalAlertMediator';
import { mainMenuToMenu } from '../../components/template-parts/Header/Header.datamediator';

// NOTE:: this method is called with data from getStaticProps for a specific route (as generated by getStaticPaths())
export default function Page({ slug, teamMember, globalAlertData, footerMenu, menu }) {
	const { uri, title, seo, content } = teamMember;

	console.log(`team/[slug].Page() - rendering team member: ${GlobalConstants.FrontendRoutes.TeamMembers}/${slug}`);

	return (
		<BasePageWrapper title={title ?? ''} seoData={seo} translatedPages={menu?.translatedPages}>
			<TeamMemberTemplate
				teamMember={teamMember}
				globalAlertData={globalAlertData}
				headerMenuData={menu}
				footerMenu={footerMenu}
			/>
		</BasePageWrapper>
	);
}

export async function getStaticProps(context = {}) {
	// console.log('team/[slug].getStaticProps() - context', context);

	const slug = context?.params.slug;
	const isPreview = Boolean(context?.preview); // force to boolean
	var databaseID = isPreview ? context?.previewData?.id : null;
	var token = isPreview ? context?.previewData?.token : null;

	// get global data (ex: menus, etc.) that doesn't change per page
	const { globalSettings, menus } = await getGlobalSettings(isPreview, context.locale);
	const mediatedFooterMenu = transformToFooterStructure(menus, globalSettings, context.locale);

	// get details from WP
	let teamMember,
		translated = null;

	try {
		if (isPreview) {
			({ teamMember, translated } = await getPreviewTeamMemberDataByDatabaseID(databaseID, token, context.locale));
		} else {
			({ teamMember, translated } = await getPublishedTeamMemberDataBySlug(slug, context.locale));
		}
	} catch (error) {
		console.log(`team/[slug].getStaticProps() - error while fetching teamMember`, error);
		return handleInvalidDataResponse(error);
	}

	const menu = mainMenuToMenu(menus, globalSettings, translated, context.locale);

	// determine our global alert settings based off global settings and page settings
	const globalAlertData = pageHeaderToGlobalAlert(globalSettings, teamMember.pageHeader);

	const revalidateOptions = getRevalidateOptions();
	return {
		props: {
			slug,
			teamMember,
			globalAlertData,
			footerMenu: mediatedFooterMenu,
			menu,
			...(await serverSideTranslations(context.locale, ['common'])),
		},
		...revalidateOptions,
	};
}

// NOTE:: getStaticPaths always runs server side (ref: https://nextjs.org/docs/basic-features/data-fetching/get-static-paths)
export async function getStaticPaths() {
	// if the flag is set, do a build only - no building of actual pages
	if (process.env.NO_PRERENDERED_PATHS_FALLBACK_ONLY === 'on') {
		console.info(
			`team/[slug].getStaticPaths() - NO_PRERENDERED_PATHS_FALLBACK_ONLY is on, not pre-generating any paths`
		);
		return {
			paths: [],
			fallback: 'blocking',
		};
	}

	const { teamMembers } = await getAllTeamMembers();

	const paths = teamMembers
		.filter((teamMember) => typeof teamMember.uri === 'string')
		.map((teamMember) => {
			const pageLocale = convertWPLocaleToNextJSLocale(teamMember.locale.locale);
			return {
				params: {
					slug: teamMember?.slug,
				},
				locale: pageLocale,
			};
		});

	// console.log('team member paths', paths);
	return {
		paths,
		fallback: false,
	};
}
