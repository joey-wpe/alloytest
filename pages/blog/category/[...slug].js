import { useRouter } from 'next/router';
import { useTranslation } from 'next-i18next';

import { getGlobalSettings } from '../../../wplib/globalSettings';
import { getRevalidateOptions } from '../../../wplib/util';
import GlobalConstants from '../../../GlobalConstants';
import { convertWPLocaleToNextJSLocale, popUrlSegmentsForPathAndLanguages } from '../../../wplib/util';
import { getAllBlogCategories, getBlogIDFromCategory, getPostsForCategory } from '../../../wplib/blogs';
import BasePageWrapper from '../../../components/page-templates/BasePageWrapper/BasePageWrapper';
import BaseTemplateWrapper from '../../../components/page-templates/BaseTemplateWrapper/BaseTemplateWrapper';
import MastheadMinimal from '../../../components/template-parts/MastheadMinimal/MastheadMinimal';
import CardSelector from '../../../components/molecules/CardSelector/CardSelector';
import { transformToFooterStructure } from '../../../components/template-parts/Footer/Footer.datamediator';
import { pageHeaderToGlobalAlert } from '../../../data-mediators/PageHeaderToGlobalAlertMediator';
import { mainMenuToMenu } from '../../../components/template-parts/Header/Header.datamediator';
import { serverSideTranslations } from 'next-i18next/serverSideTranslations';
import styles from '../../../styles/pages/BlogCategory.module.scss';

// NOTE:: this method is called with data from getStaticProps for a specific route (as generated by getStaticPaths())
export default function Page({ slug, posts, category, globalAlertData, footerMenu, menu }) {
	const router = useRouter();
	const { t } = useTranslation('common');

	const { name, uri, seo, content } = category;
	const taxonomy = posts[0]?.taxonomies.find((taxonomy) => taxonomy.taxonomyName === 'category');

	const locale = router.locale === 'en-US' ? '' : `/${router.locale}`;

	// Add breadcrumb links Home > Blog > Category
	let breadcrumb = {
		breadcrumbsLinks: [
			{ label: t('breadcrumb.home'), url: `${locale}` },
			{ label: 'Blog', url: `${locale}/blog` },
		],
	};

	breadcrumb.breadcrumbsLinks.push({ label: category.name, url: `${locale}/blog/${category.slug}` });

	// define masthead settings
	const mastheadSettings = {
		prehead: 'Category',
		preheadType: 'default',
		title: taxonomy?.termName,
		titleType: 'h1',
		description: taxonomy?.description,
		background: {
			type: 'pattern',
			color: 'blue',
		},
		breadcrumb,
	};

	console.log(`blog/[...slug].Page() - rendering blog post: ${GlobalConstants.FrontendRoutes.BlogCategory}/${slug}`);
	return (
		<BasePageWrapper
			title={name ?? ''}
			seoData={seo}
			translatedPages={menu?.translatedPages}
			breadcrumbSchemaList={breadcrumb}
		>
			<BaseTemplateWrapper
				globalAlertData={globalAlertData}
				headerMenuData={menu}
				pageCTAData={null}
				footerMenu={footerMenu}
			>
				<MastheadMinimal {...mastheadSettings} />
				<div className={`${styles.container}`}>
					<CardSelector postType={'post'} cardData={posts} />
				</div>
			</BaseTemplateWrapper>
		</BasePageWrapper>
	);
}

export async function getStaticProps(context = {}) {
	// NOTE:: this route doesn't support previews as it's not editable in the CMS

	const slug = context?.params.slug[0];
	let categoryData = null;
	let databaseID = -1;

	try {
		categoryData = await getBlogIDFromCategory(slug, context.locale);
		if (!categoryData || !categoryData.categoryData?.data?.category) {
			console.error(
				`blog/categories/[slug].getStaticProps() - error getting databaseID from slug - slug doesn't exist: ${slug}, returning notFound`
			);
			return {
				notFound: true,
			};
		}
	} catch (err) {
		console.error(
			`blog/categories/[slug] - getStaticProps() - exception getting databaseID from slug: ${slug}, failing build`,
			err
		);
		throw err;
	}

	databaseID = categoryData?.categoryData?.data?.category?.databaseId;

	if (!databaseID) {
		return {
			notFound: true,
		};
	}

	// get the post data for the category
	let postsData = null;
	try {
		postsData = await getPostsForCategory(databaseID, context.locale);
		if (!postsData) {
			console.error(
				`blog/categories/[slug].getStaticProps() - error getting post data from databaseID - databaseID doesn't exist: ${databaseID}, returning notFound`
			);
			return {
				notFound: true,
			};
		}
	} catch (err) {
		console.error(
			`blog/categories/[slug] - getStaticProps() - exception getting post data from databaseID: ${databaseID}, failing build`,
			err
		);
		throw err;
	}

	// get global data (ex: menus, etc.) that doesn't change per page
	const isPreview = false;
	const { globalSettings, menus } = await getGlobalSettings(isPreview, context.locale);
	const mediatedFooterMenu = transformToFooterStructure(menus, globalSettings, context.locale);

	const menu = mainMenuToMenu(menus, globalSettings, null, context.locale);

	// determine our global alert settings based off global settings and page settings
	const globalAlertData = pageHeaderToGlobalAlert(globalSettings);

	const revalidateOptions = getRevalidateOptions();

	const posts = postsData.postsData.data?.categories.nodes[0].posts.nodes
		.filter((post) => convertWPLocaleToNextJSLocale(post.locale.locale) === context.locale)
		.map((post) => {
			return {
				post_type: 'post',
				taxonomies: post.terms?.nodes.map((term) => {
					return {
						taxonomyName: term.taxonomyName,
						termName: term.name,
						description: term.description,
					};
				}),
				core: {
					title: post.title,
					excerpt: post.excerpt ?? null,
					permalink: post.uri ?? null,
					post_thumbnail_url: post.featuredImage?.node.sourceUrl ?? null,
					id: post.id,
				},
				acf: {
					exclude_from_archive_page: post.eventsPage?.excludeFromArchivePage ?? null,
					events_details: post.eventsPage?.eventsDetails ?? null,
					when: post.eventsPage?.when ?? null,
				},
			};
		});

	return {
		props: {
			slug,
			posts,
			category: categoryData.categoryData.data.category,
			globalAlertData,
			footerMenu: mediatedFooterMenu,
			menu,
			...(await serverSideTranslations(context.locale, ['common'])),
		},
		...revalidateOptions,
	};
}

// NOTE:: getStaticPaths always runs server side (ref: https://nextjs.org/docs/basic-features/data-fetching/get-static-paths)
export async function getStaticPaths() {
	// if the flag is set, do a build only - no building of actual pages
	if (process.env.NO_PRERENDERED_PATHS_FALLBACK_ONLY === 'on') {
		console.info(
			`blog/category/[...slug].getStaticPaths() - NO_PRERENDERED_PATHS_FALLBACK_ONLY is on, not pre-generating any paths`
		);
		return {
			paths: [],
			fallback: 'blocking',
		};
	}

	let categories = await getAllBlogCategories();

	const paths = categories.categories
		.filter((categories) => typeof categories.slug === 'string')
		.map((category) => {
			// console.log('blog', blog);
			var segments = category.slug.split('/').filter((seg) => seg !== '');
			segments = popUrlSegmentsForPathAndLanguages(segments, GlobalConstants.FrontendRoutes.BlogCategory);

			let pageLocale = convertWPLocaleToNextJSLocale(category.posts.nodes[0]?.locale.locale);

			return {
				params: {
					slug: segments,
				},
				locale: pageLocale,
			};
		});

	// console.log('blog paths', JSON.stringify(paths));
	return {
		paths,
		fallback: false,
	};
}
